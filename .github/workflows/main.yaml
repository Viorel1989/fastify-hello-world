name: Main

on:
  pull_request:
    branches:
      - main

jobs:
  test:
    name: Run tests and lint
    env:
      COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: Install dependencies and run tests and lint
        run: npm install

      - name: Run lint
        run: npm run lint

      - name: Run tests
        run: npx tap run --coverage-report=lcov test/*.test.js

      # send the coverage report to coveralls.io
      - name: Coveralls Report
        uses: coverallsapp/github-action@v2
        with:
          allow-empty: true
          fail-on-error: false
          github-token: ${{ secrets.GITHUB_TOKEN }}
          file: .tap/report/lcov.info

  check:
    name: 'Check commits'
    runs-on: ubuntu-latest

    steps:
      - name: Check out
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: '${{ secrets.GITHUB_TOKEN }}'

      - name: Install comitizen tool and commitizen check
        run: |
          pip install --user -U Commitizen
          cz check --rev-range origin/main..origin/${{ github.head_ref }}

  security:
    name: 'Run snyk security check'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true # To make sure that SARIF upload gets called
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --sarif-file-output=snyk.sarif
      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk.sarif
          
  release-please:
    name: 'Autorelease'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: googleapis/release-please-action@v4
        with:
          # this assumes that you have created a personal access token
          # (PAT) and configured it as a GitHub action secret named
          # `MY_RELEASE_PLEASE_TOKEN` (this secret name is not important).
          token: ${{ secrets.release_please_token}}
          # this is a built-in strategy in release-please, see "Action Inputs"
          # for more options
          release-type: simple

  check-signed-commits:
    name: 'Check commits signature'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Check signed commits in PR
        uses: 1Password/check-signed-commits-action@v1
        with:
          comment: |
            All commits must be signed before merging PR
